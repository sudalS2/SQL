# 프로그래머스 SQL 고득점 Kit - MySQL

# SELECT

## 강원도에 위치한 생산공장 목록 출력하기

### 1.
SELECT FACTORY_ID, FACTORY_NAME, ADDRESS
FROM FOOD_FACTORY
WHERE ADDRESS LIKE'강원도%'
ORDER BY FACTORY_ID
;

## 재구매가 일어난 상품과 회원 리스트 구하기

### 1.
SELECT USER_ID, PRODUCT_ID
FROM ONLINE_SALE
GROUP BY USER_ID, PRODUCT_ID
HAVING COUNT(*) >= 2
ORDER BY USER_ID, PRODUCT_ID DESC
;

## 과일로 만든 아이스크림 고르기

### 1.
SELECT FH.FLAVOR
FROM FIRST_HALF FH LEFT OUTER JOIN ICECREAM_INFO II ON FH.FLAVOR = II.FLAVOR
WHERE FH.TOTAL_ORDER > 3000 AND II.INGREDIENT_TYPE = 'fruit_based'
ORDER BY FH.TOTAL_ORDER DESC
;

## 인기있는 아이스크림

### 1.
SELECT FLAVOR
FROM FIRST_HALF
ORDER BY TOTAL_ORDER DESC, SHIPMENT_ID
;

## 12세 이하인 여자 환자 목록 출력하기

### 1.
SELECT PT_NAME, PT_NO, GEND_CD, AGE, IFNULL(TLNO,'NONE') AS TLNO
FROM PATIENT
WHERE GEND_CD = 'W' AND AGE <= 12
ORDER BY AGE DESC, PT_NAME
;

### 2. Oracle
SELECT PT_NAME, PT_NO, GEND_CD, AGE, NVL(TLNO,'NONE') AS TLNO
FROM PATIENT
WHERE GEND_CD = 'W' AND AGE <= 12
ORDER BY AGE DESC, PT_NAME

## 흉부외과 또는 일반외과 의사 목록 출력하기

### 1.
SELECT DR_NAME, DR_ID, MCDP_CD, DATE_FORMAT(HIRE_YMD,'%Y-%m-%d') AS HIRE_YMD
FROM DOCTOR
WHERE MCDP_CD IN ('CS','GS')
ORDER BY HIRE_YMD DESC, DR_NAME
;

### 2. Oracle
SELECT DR_NAME, DR_ID, MCDP_CD, TO_CHAR(HIRE_YMD,'YYYY-MM-DD') AS HIRE_YMD
FROM DOCTOR
WHERE MCDP_CD ='CS' OR MCDP_CD = 'GS' # = WHERE MCDP_CD IN ('CS','GS')
ORDER BY HIRE_YMD DESC, DR_NAME
;

## 모든 레코드 조회하기

### 1.
SELECT *
FROM ANIMAL_INS
ORDER BY ANIMAL_ID
;

## 역순 정렬하기

### 1.
SELECT NAME, DATETIME
FROM ANIMAL_INS
ORDER BY ANIMAL_ID desc
;

## 아픈 동물 찾기

### 1.
SELECT ANIMAL_ID, NAME
FROM ANIMAL_INS
WHERE INTAKE_CONDITION = 'Sick'
ORDER BY ANIMAL_ID
;

## 어린 동물 찾기

### 1.
SELECT ANIMAL_ID, NAME
FROM ANIMAL_INS
WHERE INTAKE_CONDITION != 'Aged'
ORDER BY ANIMAL_ID
;

## 동물의 아이디와 이름

### 1.
SELECT ANIMAL_ID, NAME
FROM ANIMAL_INS
ORDER BY ANIMAL_ID
;

## 여러 기준으로 정렬하기

### 1.
SELECT ANIMAL_ID, NAME, DATETIME
FROM ANIMAL_INS
ORDER BY NAME, DATETIME DESC
;

## 상위 n개 레코드

### 1.
SELECT NAME
FROM ANIMAL_INS
ORDER BY DATETIME
LIMIT 1 # 위에서 1개의 정보 추출
;

### 설명) limit 0, 1 : 위에서 0부터 1까지의 정보 추출

### 2. Oracle
SELECT NAME
FROM (SELECT *
     FROM ANIMAL_INS
     ORDER BY DATETIME)
WHERE ROWNUM <= 1
;

## 조건에 맞는 회원수 구하기

### 1.
SELECT COUNT(USER_ID) USERS
FROM USER_INFO
WHERE JOINED LIKE '2021%' AND AGE >= 20 AND AGE <= 29
;

### 2.
SELECT COUNT(*) AS USERS
FROM USER_INFO
WHERE YEAR(JOINED) = 2021 AND AGE >= 20 AND AGE <= 29
;

### 3. Oracle
SELECT COUNT(*) AS USERS
FROM USER_INFO
WHERE TO_CHAR(JOINED, 'YYYY') = '2021' AND AGE >= 20 AND AGE <= 29
;

## 3월에 태어난 여성 회원 목록 출력하기

### 1.
SELECT MEMBER_ID, MEMBER_NAME, GENDER, DATE_FORMAT(DATE_OF_BIRTH, '%Y-%m-%d') AS DATE_OF_BIRTH
FROM MEMBER_PROFILE
WHERE MONTH(DATE_OF_BIRTH) = 03 AND GENDER ='W' AND TLNO IS NOT NULL
ORDER BY MEMBER_ID
;

### 2.Oracle
SELECT MEMBER_ID, MEMBER_NAME, GENDER, TO_CHAR(DATE_OF_BIRTH, 'yyyy-mm-dd') AS DATE_OF_BIRTH
FROM MEMBER_PROFILE
WHERE TO_CHAR(DATE_OF_BIRTH,'MM') = 03 AND GENDER ='W' AND TLNO IS NOT NULL
ORDER BY MEMBER_ID
;

## 서울에 위치한 식당 목록 출력하기

### 1.
SELECT RI.REST_ID, RI.REST_NAME, RI.FOOD_TYPE, RI.FAVORITES, RI.ADDRESS, ROUND(AVG(RR.REVIEW_SCORE),2) AS SCORE
FROM REST_INFO RI JOIN REST_REVIEW RR ON RI.REST_ID = RR.REST_ID
GROUP BY RI.REST_ID
HAVING RI.ADDRESS LIKE '서울%'
ORDER BY SCORE DESC, RI.FAVORITES DESC
;

### 2.
SELECT REST_INFO.REST_ID, REST_NAME, FOOD_TYPE, FAVORITES, ADDRESS, ROUND(AVG(REVIEW_SCORE),2) as SCORE
FROM REST_REVIEW JOIN REST_INFO ON REST_REVIEW.REST_ID = REST_INFO.REST_ID 
WHERE SUBSTR(ADDRESS,1,2) = '서울'
GROUP BY REST_ID
ORDER BY SCORE DESC, FAVORITES DESC

### 3. Oracle
SELECT RI.REST_ID, RI.REST_NAME, RI.FOOD_TYPE, RI.FAVORITES, RI.ADDRESS, RR.SCORE
FROM REST_INFO RI JOIN (SELECT REST_ID, ROUND(AVG(REVIEW_SCORE),2) SCORE
                        FROM REST_REVIEW
                        GROUP BY REST_ID) RR 
ON RI.REST_ID = RR.REST_ID
WHERE RI.ADDRESS LIKE '서울%'
ORDER BY RR.SCORE DESC, RI.FAVORITES DESC
;

## 오프라인/온라인 판매 데이터 통합하기

### 1.
SELECT DATE_FORMAT(SALES_DATE,'%Y-%m-%d') as SALES_DATE, PRODUCT_ID, USER_ID, SALES_AMOUNT
FROM ONLINE_SALE
WHERE SALES_DATE LIKE '2022-03%' # = DATE_FORMAT(SALES_DATE,'%Y-%m') = '2022-03'
UNION ALL
SELECT DATE_FORMAT(SALES_DATE, '%Y-%m-%d') as SALES_DATE, PRODUCT_ID, NULL, SALES_AMOUNT
FROM OFFLINE_SALE
WHERE SALES_DATE LIKE '2022-03%'
ORDER BY SALES_DATE, PRODUCT_ID, USER_ID
;

### 2. Oracle
SELECT *
FROM (
    SELECT TO_CHAR(SALES_DATE,'YYYY-MM-DD') AS SALES_DATE,
    PRODUCT_ID, USER_ID, SALES_AMOUNT
      FROM ONLINE_SALE
     WHERE TO_CHAR(SALES_DATE, 'YYYYMM') = '202203'      
 UNION ALL
    SELECT TO_CHAR(SALES_DATE,'YYYY-MM-DD') AS SALES_DATE,
    PRODUCT_ID, NULL AS USER_ID, SALES_AMOUNT
      FROM OFFLINE_SALE
     WHERE TO_CHAR(SALES_DATE, 'YYYYMM') = '202203'
)
ORDER BY SALES_DATE, PRODUCT_ID, USER_ID
;

# JOIN

## 없어진 기록 찾기

### 1.
SELECT AO.ANIMAL_ID, AO.NAME
FROM ANIMAL_OUTS AS AO LEFT OUTER JOIN ANIMAL_INS AS AI 
ON AO.ANIMAL_ID = AI.ANIMAL_ID
WHERE AI.ANIMAL_ID IS NULL
ORDER BY AO.ANIMAL_ID
;

### 2.


## 있었는데요 없었습니다
### 1.
SELECT AO.ANIMAL_ID, AO.NAME
FROM ANIMAL_INS AS AI JOIN ANIMAL_OUTS AS AO
ON AI.ANIMAL_ID = AO.ANIMAL_ID
WHERE AI.DATETIME > AO.DATETIME
ORDER BY AI.DATETIME
;

### 2.


## 오랜 기간 보호한 동물(1)

### 1.
SELECT AI.NAME, AI.DATETIME
FROM ANIMAL_INS AS AI LEFT OUTER JOIN ANIMAL_OUTS AS AO
ON AI.ANIMAL_ID = AO.ANIMAL_ID
WHERE AO.DATETIME IS NULL 
ORDER BY AI.DATETIME
LIMIT 3
;

### 2.


## 상품별 오프라인 매출 구하기

### 1.
SELECT P.PRODUCT_CODE, SUM(OS.SALES_AMOUNT * P.PRICE) AS SALES
FROM OFFLINE_SALE AS OS LEFT OUTER JOIN PRODUCT AS P
ON OS.PRODUCT_ID = P.PRODUCT_ID
GROUP BY P.PRODUCT_CODE
ORDER BY SALES DESC, PRODUCT_CODE
;

### 2.


## 5월 식품들의 총매출 구하기

### 1.
SELECT FO.PRODUCT_ID, FP.PRODUCT_NAME, SUM(FP.PRICE * FO.AMOUNT) AS TOTAL_SALES
FROM FOOD_ORDER AS FO LEFT OUTER JOIN FOOD_PRODUCT AS FP
ON FO.PRODUCT_ID = FP.PRODUCT_ID
WHERE FO.PRODUCE_DATE LIKE '2022-05%' AND FP.PRICE IS NOT NULL
GROUP BY FO.PRODUCT_ID
ORDER BY TOTAL_SALES DESC, FO.PRODUCT_ID
;

### 2.


##  그룹별 조건에 맞는 식당 목록 출력하기

### 1.
SELECT MP.MEMBER_NAME, RR.REVIEW_TEXT, DATE_FORMAT(RR.REVIEW_DATE,'%Y-%m-%d') AS REVIEW_DATE
FROM REST_REVIEW AS RR LEFT OUTER JOIN MEMBER_PROFILE AS MP
ON RR.MEMBER_ID = MP.MEMBER_ID
WHERE (SELECT MEMBER_ID FROM REST_REVIEW GROUP BY MEMBER_ID ORDER BY COUNT(REVIEW_TEXT) DESC LIMIT 1) = RR.MEMBER_ID
ORDER BY RR.REVIEW_DATE, RR.REVIEW_TEXT
;

### 2.

## 주문량이 많은 아이스크림들 조회하기

### 1.
SELECT FH.FLAVOR
FROM FIRST_HALF AS FH JOIN (SELECT SHIPMENT_ID, FLAVOR, SUM(TOTAL_ORDER) AS TOTAL_ORDER FROM JULY GROUP BY FLAVOR) AS J
ON J.FLAVOR = FH.FLAVOR
ORDER BY (FH.TOTAL_ORDER + J.TOTAL_ORDER) DESC
LIMIT 3
;
 
### 2.

## 보호소에서 중성화한 동물

### 1.
SELECT AI.ANIMAL_ID, AI.ANIMAL_TYPE, AI.NAME
FROM ANIMAL_INS AS AI JOIN ANIMAL_OUTS AS AO
ON AI.ANIMAL_ID = AO.ANIMAL_ID
WHERE AI.SEX_UPON_INTAKE != AO.SEX_UPON_OUTCOME
ORDER BY AI.ANIMAL_ID
;

### 2.

## 상품을 구매한 회원 비율 구하기

### 1.
SELECT YEAR, MONTH, COUNT(*) AS PUCHASED_USERS,
	ROUND((COUNT(*)/ (SELECT COUNT(*)
					FROM USER_INFO WHERE YEAR(JOINED) = 2021)), 1) AS PUCHASED_RATIO
FROM (
    SELECT DISTINCT YEAR(S.SALES_DATE) AS YEAR, MONTH(S.SALES_DATE) AS MONTH, U.USER_ID
    FROM ONLINE_SALE S JOIN USER_INFO U 
    ON S.USER_ID = U.USER_ID AND YEAR(JOINED) = 2021) as A
GROUP BY YEAR, MONTH
ORDER BY YEAR, MONTH

### 2.

##
### 1.
### 2.

##
### 1.
### 2.

##
### 1.
### 2.

##
### 1.
### 2.

##
### 1.
### 2.

##
### 1.
### 2.

##
### 1.
### 2.

##
### 1.
### 2.

##
### 1.
### 2.

##
### 1.
### 2.

##
### 1.
### 2.

##
### 1.
### 2.

##
### 1.
### 2.

##
### 1.
### 2.

##
### 1.
### 2.

##
### 1.
### 2.


